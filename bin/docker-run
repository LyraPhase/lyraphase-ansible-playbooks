#!/usr/bin/env bash
# docker-run: run the given ansible command in a docker container
# ---------------------------------
# Debug logging for this script
# To use: export DOCKER_RUN_LOG=DEBUG
DOCKER_RUN_LOG="$(echo $DOCKER_RUN_LOG | tr '[a-z]' '[A-Z]')"
if [[ "${DOCKER_RUN_LOG}" == "DEBUG" ]]; then
  PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }' ## Debugging prompt (for bash -x || set -x)
  set -x
fi

CONTAINER_ID="${CONTAINER_ID-docker.io/lyraphase/ansible-playbooks-ee:latest}"

REPO_BASE=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )
if [ $# -ge   1 ]; then
   CMD=$@
else
   echo -n "Enter cmd: "
   read CMD
fi
MY_UID=$(id -u)
MY_GID=$(id -g)
# Because some OSX environments use MS AD style group name, we must fudge it
# Reference: http://unix.stackexchange.com/questions/11477/what-are-the-allowed-group-names-for-groupadd
MY_GROUPNAME=$(id -gn | tr '\\' '-' | tr ' ' '_')
MY_USERNAME=$(id -un)
# name to give the running container. Should be unique.
CONTAINER_NAME=ansible_run.${MY_USERNAME}.${RANDOM}
MY_HOSTNAME=$(hostname)   # Only used for warning message clarity

RUN_SCRIPT=$(mktemp ${REPO_BASE}/dockerized_run.XXXXX)

# Cleanup on exit
trap "bash -c 'rm ${RUN_SCRIPT} ' &>/dev/null" EXIT HUP INT QUIT KILL TERM

# HACK: this is to allow 'docker-run' to work when DNS is unavailable.
# For environments without DNS, we use /etc/hosts.
# The container needs the /etc/hosts file to find
# machines.
if [ -n "$DOCKER_NO_DNS" -a "$DOCKER_NO_DNS" == '1'  ]; then
    DOCKER_RUN_ARGS="-v /etc/hosts:/etc/hosts ${DOCKER_RUN_ARGS:-}"
fi

# Hack for importing ssh-agent into docker-machine VM
DOCKER_MACHINE_NAME=$(docker-machine active 2>/dev/null)

if env | grep -q SSH_AUTH_SOCK && test -n "${DOCKER_MACHINE_NAME}"; then
  # Setup SSH forwarding into docker host
  # From https://gist.github.com/rcoup/53e8dee9f5ea27a51855
  SSH_SOCK=docker.${DOCKER_MACHINE_NAME}.$$.ssh.socket

  SSH_PORT=$(docker-machine inspect -f '{{.Driver.SSHPort}}' ${DOCKER_MACHINE_NAME})
  [[ -z "$SSH_PORT" || "$SSH_PORT" == "<no value>" ]] && SSH_PORT=$(docker-machine inspect -f '{{.Driver.Driver.SSHPort}}' ${DOCKER_MACHINE_NAME})

  # Support for docker-xhyve-driver + docker-machine
  # Detect the IP of the VM to SSH into for ssh-agent forwarding
  DM_HOST=$(docker-machine inspect -f '{{.Driver.IPAddress}}' ${DOCKER_MACHINE_NAME})
  [[ -z "$DM_HOST" || "$DM_HOST" == "<no value>" ]] && DM_HOST=$(docker-machine inspect -f '{{.Driver.Driver.IPAddress}}' ${DOCKER_MACHINE_NAME})
  # Test an SSH connection to the docker machine VM via IPAddress first...
  # if this does not work, it is likely that virtualbox driver is being used, and
  # VBoxHeadless process has grabbed a port listening on the Host's SSH_PORT, probably with 127.0.0.1 loopback (host-only networking)
  # However, this is dynamic depending on the user's docker-machine driver and VirtualBox network settings (in the case of virtualbox)
  # so we must grab the listening interface IP manually
  if ssh -i $HOME/.docker/machine/machines/${DOCKER_MACHINE_NAME}/id_rsa -o PasswordAuthentication=no -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 \
    -p ${SSH_PORT} docker@${DM_HOST} "echo ssh-success for docker@${DM_HOST}:${SSH_PORT}"
  then
    # Pass... we may use docker@${DM_HOST}:${SSH_PORT}
    echo "INFO: Found docker-machine VM listening on ${DM_HOST}:${SSH_PORT}"
  else
    # Detect the interface for DM_HOST
    # Since output varies for lsof depending on bridge & virtual interfaces, parse just the last IPv4 Address on the end
    # Example Pattterns to match:
    #  n127.0.0.1:64086
    #  n192.168.1.129:59584->52.91.196.94:ssh
    #
    LSOF_PATTERN_REGEX='n((.*?):.*?->)?(.*?):.*'
    # Passing in at least -F 'n' to lsof shows all TCP interface:port lines beginning with character 'n'
    DM_HOST_CANDIDATES=$(lsof -F 'PnLt' -n -i:$SSH_PORT | grep -E '^n')
    DM_HOST_CANDIDATES_REAL_IP=$(echo -ne "$DM_HOST_CANDIDATES" | perl -n -e "if (m/^n/) { s/${LSOF_PATTERN_REGEX}/\3/; print $_ ; }" | uniq)
    DM_HOST_CANDIDATES_BRIDGE_IP=$(echo -ne "$DM_HOST_CANDIDATES" | perl -n -e "if (m/^n/) { s/${LSOF_PATTERN_REGEX}/\2/; print $_ ; }" | uniq)
    # If we get more than one, we must search through the list of interfaces to find the right one
    # Finding the right one can be problematic depending on docker-machine driver's implementation of networking, and whether host is also running sshd
    if [ "$(echo "$DM_HOST_CANDIDATES_REAL_IP" | wc -l )" -eq 1 ]; then
      DM_HOST=$DM_HOST_CANDIDATES_REAL_IP
    elif echo "$DM_HOST_CANDIDATES_REAL_IP" | grep -q -c "127.0.0.1" && \
         ssh -i $HOME/.docker/machine/machines/${DOCKER_MACHINE_NAME}/id_rsa -o PasswordAuthentication=no -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 \
    -p ${SSH_PORT} docker@127.0.0.1 "docker version"
    then
      # Localhost listener takes priority, as this is most likely VBoxHeadless
      DM_HOST='127.0.0.1'
    else
      echo "INFO: Found multiple docker-machine VM candidates listening on $SSH_PORT"
      if echo "$DM_HOST_CANDIDATES_REAL_IP" | grep -q -c "$(docker-machine ip ${DOCKER_MACHINE_NAME})"; then
        echo "INFO: Found docker-machine VM candidate matching 'docker-machine ip ${DOCKER_MACHINE_NAME}'"
        DM_HOST=$(echo "$DM_HOST_CANDIDATES_REAL_IP" | grep "$(docker-machine ip ${DOCKER_MACHINE_NAME})")
      else
        # Loop through haphazardly hoping we guess right
        for iface in $(ifconfig -l) ; do
          for ip in $DM_HOST_CANDIDATES_BRIDGE_IP; do
            if ifconfig $iface | grep $ip ; then
              # Now we know the interface and bridge IP
              # Figure out what the listening IP was
              docker_host_real_ip=$(echo "$DM_HOST_CANDIDATES" | grep $ip | perl -n -e "if (m/^n/) { s/${LSOF_PATTERN_REGEX}/\3/; print $_ ; }" | uniq)
              echo "INFO: Trying to detect docker on ${DM_HOST}:${SSH_PORT}"

              if ssh -i $HOME/.docker/machine/machines/${DOCKER_MACHINE_NAME}/id_rsa -o PasswordAuthentication=no -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 \
    -p ${SSH_PORT} docker@${docker_host_real_ip} "docker version"
              then
                echo "INFO: Found docker-machine VM listening on ${DM_HOST}:${SSH_PORT}"
                DM_HOST="$docker_host_real_ip"
                break
              fi
            fi
          done
        done
      fi
    fi
  fi

  # Most ssh options copied from docker-machine ssh
  # Others:
  #  -A - Enables forwarding of the authentication agent connection
  #  -M - Places the ssh client into ``master'' mode for connection sharing
  #  -S - Specifies the location of a control socket for connection sharing
  #  -f - Requests ssh to go to background just before command execution
  #  -n - Redirects stdin from /dev/null
  #  tail -f /dev/null - command that never ends
  ssh -i $HOME/.docker/machine/machines/${DOCKER_MACHINE_NAME}/id_rsa \
    -o PasswordAuthentication=no \
    -o IdentitiesOnly=yes \
    -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null \
    -o LogLevel=quiet \
    -o ConnectionAttempts=3 \
    -o ConnectTimeout=10 \
    -p ${SSH_PORT} \
    docker@${DM_HOST} \
    -A -M -S $SSH_SOCK -f -n \
    tail -f /dev/null

  ssh_forwarding_pid=$!
  if test -z "${ssh_forwarding_pid}"; then
    ssh_forwarding_pid=$(ps aux | grep "ssh.*docker@${DM_HOST}" | grep -v grep | head -n1 | awk '{print $2}')
  fi

  export DM_AGENT_SOCK=$(ssh -i $HOME/.docker/machine/machines/${DOCKER_MACHINE_NAME}/id_rsa -o UserKnownHostsFile=/dev/null -o PasswordAuthentication=no -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 -S $SSH_SOCK docker@${DM_HOST} echo \$SSH_AUTH_SOCK)
  echo "INFO: Found $DM_AGENT_SOCK"
  echo "INFO: Running ssh forwarding pid: $ssh_forwarding_pid"
  # Try our best to kill the socket on exit
  trap "bash -c 'ssh -i $HOME/.docker/machine/machines/${DOCKER_MACHINE_NAME}/id_rsa -o UserKnownHostsFile=/dev/null -o PasswordAuthentication=no -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 -S $SSH_SOCK -O exit docker@${DM_HOST} ; rm ${RUN_SCRIPT}; sleep 1; kill $ssh_forwarding_pid ; ssh -i $HOME/.docker/machine/machines/${DOCKER_MACHINE_NAME}/id_rsa -p ${SSH_PORT} -o UserKnownHostsFile=/dev/null -o PasswordAuthentication=no -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10  docker@${DM_HOST} rm -f ${DM_AGENT_SOCK} ' &>/dev/null" EXIT HUP INT QUIT KILL TERM

  # Check if DM_AGENT_SOCK exists in docker-machine VM
  ssh -S $SSH_SOCK docker@${DM_HOST} "[ -e \"$DM_AGENT_SOCK\" ]"
  [ $? -eq 0 ] || echo "ERROR: DM_AGENT_SOCK path: $DM_AGENT_SOCK does not exist... could not forward SSH_AUTH_SOCK into docker-machine!  Is your ssh-agent running?"
fi


# If Docker Host is running ssh-agent, import SSH_AUTH_SOCK into container env
if env | grep -q SSH_AUTH_SOCK ; then
  if uname -s | grep -qi 'darwin' && [ -z "$DOCKER_MACHINE_NAME" ] ; then
    # Use "magic" ssh-auth.sock path provided as of Docker for Mac >= 2.2.0.0
    SSH_AUTH_SOCK_MAGIC_PATH='/run/host-services/ssh-auth.sock'
    ANSIBLE_SSH_ARGS=" -o ForwardAgent=yes -o ControlPath=/tmp/ssh-%r@%h:%p -o ControlMaster=auto -o ControlPersist=60s ${ANSIBLE_SSH_ARGS:-}"
    DOCKER_RUN_SSH_AGENT_ARGS="-v ${SSH_AUTH_SOCK_MAGIC_PATH}:${SSH_AUTH_SOCK_MAGIC_PATH} -e SSH_AUTH_SOCK=${SSH_AUTH_SOCK_MAGIC_PATH}"
    EXPORT_DOCKER_SSH_AGENT_AUTH_SOCK="export SSH_AUTH_SOCK=$SSH_AUTH_SOCK_MAGIC_PATH ; export ANSIBLE_SSH_ARGS=\"$ANSIBLE_SSH_ARGS\" ; "
  else
    SOCK_PATH="$SSH_AUTH_SOCK" # Default to passing through SSH_AUTH_SOCK (if on angus00.*)
    if [[ -h $SOCK_PATH ]]; then
      SOCK_PATH=$(readlink -f $SOCK_PATH)
    fi
    # If docker-machine was detected, pass that socket through instead
    env | grep -q DM_AGENT_SOCK && SOCK_PATH="$DM_AGENT_SOCK"
    if [[ -z "$SOCK_PATH" || ( "${SOCK_PATH}" != "${DM_AGENT_SOCK}" && ! -e "$SOCK_PATH" ) ]]; then
       echo "ERROR: SSH_AGENT_SOCK path: $SOCK_PATH does not exist... is your ssh-agent running?"
    else
      DOCKER_RUN_SSH_AGENT_ARGS="-v $(dirname $SOCK_PATH):/ssh-agent -e SSH_AUTH_SOCK=/ssh-agent/$(basename $SOCK_PATH)"
      ANSIBLE_SSH_ARGS=" -o ForwardAgent=yes -o ControlPath=/tmp/ssh-%r@%h:%p -o ControlMaster=auto -o ControlPersist=60s ${ANSIBLE_SSH_ARGS:-}"
      EXPORT_DOCKER_SSH_AGENT_AUTH_SOCK="export SSH_AUTH_SOCK=/ssh-agent/$(basename $SOCK_PATH) ; export ANSIBLE_SSH_ARGS=\"$ANSIBLE_SSH_ARGS\" ; "
    fi
  fi
fi

# If CMD passed is init, avoid using RUN_SCRIPT
if [[ "$CMD" == *"/init" ]]; then
  # For first 'docker run', just run the init process as pid 1
  RUN_SCRIPT="$CMD"
  # Spawn the init process as a background container
  DOCKER_INTERACT_ARGS='-d'
  echo "INFO: Detected that you are running an init container"
  echo "WARN: Running background init container in detached mode"
  echo "WARN: You will need to re-run this script with CMD=bash to exec into it"
  echo "WARN: This container is long-lived and will require you to stop it manually when you are done!"
  # If we are using docker-machine / boot2docker, then ensure the VM has DBus installed
  [ -n "$DOCKER_MACHINE_NAME" ] && docker-machine ssh $DOCKER_MACHINE_NAME 'tce-status -i | grep -q dbus || tce-load -wi dbus'
else
  DOCKER_INTERACT_ARGS='-ti --rm=true'

  # Always use sudo when running pip commands inside container
  # If pip is run without sudo it hangs in deadlock condition
  if [ -n "$DOCKER_MACHINE_NAME" ]; then
    EXPORT_DOCKER_PIP_USE_SUDO='export PIP_USE_SUDO=1; '
  else
    # unset this for security purposes if running on native host
    unset EXPORT_DOCKER_PIP_USE_SUDO
  fi

  # Create script to run inside docker container
cat << EOF > ${RUN_SCRIPT}
#!/usr/bin/env bash
# Debug logging for ${RUN_SCRIPT}
# To use: export DOCKER_RUN_ARGS='-e DOCKER_RUN_LOG=DEBUG'
DOCKER_RUN_LOG="\$(echo \$DOCKER_RUN_LOG | tr '[a-z]' '[A-Z]')"
if [[ "\${DOCKER_RUN_LOG}" == "DEBUG" ]]; then
  PS4='+(\${BASH_SOURCE}:\${LINENO}): \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }' ## Debugging prompt (for bash -x || set -x)
  set -x
fi
# Grab UID & GID from HEREDOC eval'd variables
# These are set in docker-run, then hardcoded into this HEREDOC-generated script
# All vars eval'd at this script runtime were escaped with backslash + dollar sign
MY_UID=$MY_UID
MY_GID=$MY_GID
USERS_GID=\$(getent group users |cut -d: -f3)
WHEEL_GID=\$(getent group wheel |cut -d: -f3)
DOCKER_MACHINE_NAME=$DOCKER_MACHINE_NAME
SSH_AUTH_SOCK_MAGIC_PATH='/run/host-services/ssh-auth.sock'

# Ugly hack to support boot2docker or VirtualBox shared volumes mounted with different UID & GID inside docker host & container
# Reference: https://github.com/boot2docker/boot2docker/issues/581
if stat --format=%g ${HOME} 2>&1 1>/dev/null ; then
  stat_format_arg='--format='
elif stat -f %g ${HOME} 2>&1 1>/dev/null; then
  stat_format_arg='-f '
else
  echo "ERROR: Unsupported variant of 'stat' utility detected... not sure how to proceed"
  exit 1
fi

MY_DIR_GID="\$(stat \${stat_format_arg}%g ${HOME})"
MY_DIR_UID="\$(stat \${stat_format_arg}%u ${HOME})"

if [ $MY_GID -ne \$MY_DIR_GID -o $MY_UID -ne \$MY_DIR_UID -a -n \$MY_DIR_GID -a -n \$MY_DIR_UID ]; then
  echo "WARN: $HOME is not owned by same UID/GID as on $MY_HOSTNAME"
  if [ -n "\$DOCKER_MACHINE_NAME" ]; then
    echo "WARN: This may be due to boot2docker or docker-machine auto-mounting /Users with different UID & GID..."
    echo "INFO: If you are having permission issues when writing to /Users, try remounting the share as the UID/GID of your OSX user"
    echo "INFO: For example:"
    echo "        docker-machine ssh $DOCKER_MACHINE_NAME 'sudo mount -t vboxsf -o uid=$MY_UID,gid=$MY_GID Users /Users'"
  fi
  if [[ "$HOME" == *"/Users/"* ]]; then
    echo "WARN: Found '/Users/' in \\\$HOME ($HOME)... Assuming boot2docker or docker-machine did this."
    echo "WARN: Re-setting UID & GID inside container to match volume: $HOME"
    if [[ "\$SSH_AUTH_SOCK" != \$SSH_AUTH_SOCK_MAGIC_PATH ]]; then
      MY_UID=\$MY_DIR_UID
      MY_GID=\$MY_DIR_GID
    fi
    # Force GID from OSX host... gid 20 (staff) on OSX already used inside container (games)
    echo "WARN: Allowing duplicate gid to be created via 'groupadd -o'"
    groupadd_args='-o'
  fi
fi

if env | grep -q SSH_AUTH_SOCK ; then
  # Fix SSH_AUTH_SOCK permissions inside container
  if [[ "\$SSH_AUTH_SOCK" == \$SSH_AUTH_SOCK_MAGIC_PATH ]]; then
    SSH_AUTH_SOCK_GID="\$MY_GID"
    SSH_AUTH_SOCK_UID="\$MY_UID"
  else
    SSH_AUTH_SOCK_GID="\$(stat \${stat_format_arg}%g \${SSH_AUTH_SOCK})"
    SSH_AUTH_SOCK_UID="\$(stat \${stat_format_arg}%u \${SSH_AUTH_SOCK})"
  fi
  if [[ "\$SSH_AUTH_SOCK" != \$SSH_AUTH_SOCK_MAGIC_PATH ]]; then
    if [ -n \$SSH_AUTH_SOCK -a $MY_GID -ne \$SSH_AUTH_SOCK_GID -o $MY_UID -ne \$SSH_AUTH_SOCK_UID -a -n \$SSH_AUTH_SOCK_GID -a -n \$SSH_AUTH_SOCK_UID ]; then
      setfacl -m ${MY_UID}:rx  \$(dirname "\$SSH_AUTH_SOCK") ;
      setfacl -m ${MY_UID}:rwx "\$SSH_AUTH_SOCK" ;
      setfacl -m ${MY_GID}:rwx "\$SSH_AUTH_SOCK" ;
    fi
  fi
fi

# Create user & group with names matching host, GID/UID matching volume permissions (ideally)
if (! egrep -q "^${MY_GROUPNAME}:x:\${MY_GID}:" /etc/group); then
    groupadd \${groupadd_args} -g \${MY_GID} "${MY_GROUPNAME}"
fi
useradd -u \${MY_UID} -g \${MY_GID} -G \${USERS_GID}\${WHEEL_GID:+,\${WHEEL_GID}} -d ${HOME} -M ${MY_USERNAME}

if [[ "\$SSH_AUTH_SOCK" == \$SSH_AUTH_SOCK_MAGIC_PATH ]]; then
  chown \$SSH_AUTH_SOCK_UID:\$SSH_AUTH_SOCK_GID \$SSH_AUTH_SOCK_MAGIC_PATH
fi

su - ${MY_USERNAME} -c \
'$EXPORT_DOCKER_SSH_AGENT_AUTH_SOCK $EXPORT_DOCKER_PIP_USE_SUDO \
cd ${REPO_BASE} && \
source bin/setup-ansible-env.sh && [ -e /opt/ansible/ansible/hacking/env-setup ] && source /opt/ansible/ansible/hacking/env-setup ; \
exec script -q -c "exec ${CMD}" /dev/null'
EOF

fi # End init check

[[ "$CMD" == *"/init" ]] || chmod +x ${RUN_SCRIPT}
# Check for previously spawned init container
# If init container is running, exec into that, otherwise run the RUN_SCRIPT as normal
RUNNING_CONTAINERS="$(docker ps --filter status=running --format '{{.Names}}' | grep "ansible_run.$USER")"

# Use first found init container
for container_name in $RUNNING_CONTAINERS; do
  if docker inspect --format '{{.Config.Cmd}}' $container_name | grep -Eq '.*/init' ; then
    EXEC_CONTAINER="$container_name"
    break
  fi
done

if [ -n "$EXEC_CONTAINER" ]; then
  docker exec ${DOCKER_INTERACT_ARGS:-} ${EXEC_CONTAINER} ${RUN_SCRIPT}
  RET=$?
else
  docker run ${DOCKER_INTERACT_ARGS:-} -v ${REPO_BASE}:${REPO_BASE} -v ${HOME}:${HOME} --name="${CONTAINER_NAME}" ${DOCKER_RUN_SSH_AGENT_ARGS:-} ${DOCKER_RUN_ARGS:-} ${CONTAINER_ID} ${RUN_SCRIPT}
  RET=$?
  rm ${RUN_SCRIPT}
fi
exit $RET
