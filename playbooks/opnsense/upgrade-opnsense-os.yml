---
# This playbook creates a BSD Boot Environment and updates OPNSense firewall OS

- name: Upgrade OPNSense OS
  hosts: opnsense
  user: root
  gather_facts: false

  # TODO: Maybe wrap tasks in role
  # roles:
  #   - opnsense-upgrade

  tasks:
    - name: List boot environments
      ansible.builtin.command: >-
        bectl list -a
      changed_when: false
      register: bectl_list_result
      tags:
        - bsd_bectl
        - bsd_be_create

    - name: Show boot environments
      ansible.builtin.debug:
        var: bectl_list_result
      changed_when: false
      tags:
        - bsd_bectl
        - bsd_be_create
        - debug

    - name: List zpool checkpoints
      ansible.builtin.command:
        zpool list -H -o name,checkpoint
      changed_when: false
      register: zpool_checkpoints_result
      tags:
        - bsd_zpool
        - bsd_zpool_list

    - name: Show 'stdout_lines' from the 2nd line to the end
      ansible.builtin.debug:
        msg: "{{ item | ansible.builtin.split('\t') }}"
      loop: "{{ zpool_checkpoints_result.stdout_lines }}"
      tags:
        - bsd_zpool
        - bsd_zpool_list
        - debug

    - name: Check for any old checkpoints
      ansible.builtin.shell:
        zpool status zroot | grep checkpoint
      register: zpool_status_has_checkpoint
      failed_when: false
      tags:
        - bsd_zpool
        - bsd_zpool_status

    - name: Show boot environments
      ansible.builtin.debug:
        var: zpool_status_has_checkpoint
      changed_when: false
      tags:
        - bsd_zpool
        - bsd_zpool_status
        - debug

    - name: Prompt to delete old checkpoints
      ansible.builtin.pause:
        prompt: >-
          ZFS checkpoint found! Please confirm you want to discard the old checkpoint!
          Remember: A ZFS pool can only have a single checkpoint.
          This playbook needs to create a checkpoint before upgrading OPNSense.
          Press return to continue. Press Ctrl+c and then "a" to abort
      when: "{{ zpool_status_has_checkpoint.rc == 0 }}"
      tags:
        - pause
        - prompt
        - destructive

    - name: Delete OLD zpool checkpoint
      ansible.builtin.command:
        zpool checkpoint --discard --wait zroot
      become: true
      become_method: ansible.builtin.sudo
      register: zpool_checkpoint_discard_result
      when: "{{ zpool_status_has_checkpoint.rc == 0 }}"
      tags:
        - bsd_zpool
        - bsd_zpool_checkpoint_discard
        - destructive

    - name: Create NEW zpool checkpoint
      ansible.builtin.command:
        echo zpool checkpoint zroot
      become: true
      become_method: ansible.builtin.sudo
      register: zpool_checkpoint_create_result
      tags:
        - bsd_zpool
        - bsd_zpool_checkpoint_create

    - name: Get OLD OPNSense Release Version
      ansible.builtin.shell:
        opnsense-version | awk '{ print $2 }'
      register: opnsense_current_version
      tags:
        - opnsense_version
        - opnsense_upgrade
        - upgrade

    - name: Create boot environment for OLD OPNSense Version
      ansible.builtin.command:
        echo bectl create {{ opnsense_current_version.stdout }}
      become: true
      become_method: ansible.builtin.sudo
      register: opnsense_be_create_result
      tags:
        - opnsense_upgrade
        - bsd_bectl
        - bsd_be_create
        - upgrade

    - name: Activate boot environment for OLD OPNSense Version
      ansible.builtin.command:
        echo bectl activate {{ opnsense_current_version.stdout }}
      become: true
      become_method: ansible.builtin.sudo
      register: opnsense_be_activate_result
      tags:
        - opnsense_upgrade
        - bsd_bectl
        - bsd_be_create
        - upgrade

    # - name: Reboot OPNSense to test the restore boot environment and wait for it to restart
    #   ansible.builtin.reboot:
    #     msg: "Reboot initiated by Ansible"
    #     connect_timeout: 5
    #     reboot_timeout: 600
    #     pre_reboot_delay: 0
    #     post_reboot_delay: 30
    #     test_command: whoami
    #   become: true
    #   become_method: sudo
    #   register: opnsense_be_reboot_result
    #   tags:
    #     - reboot
    #     - opnsense_upgrade
    #     - upgrade

    - name: Wait for OPNSense host to reboot
      ansible.builtin.command:
        echo TODO
      become: true
      become_method: ansible.builtin.sudo
      register: opnsense_be_create_result
      tags:
        - reboot
        - opnsense_upgrade
        - upgrade

    - name: List boot environments
      ansible.builtin.command: >-
        bectl list -a
      changed_when: false
      register: bectl_pre_upgrade_list_result
      tags:
        - bsd_bectl
        - bsd_be_create

    - name: Show boot environments
      ansible.builtin.debug:
        var: bectl_pre_upgrade_list_result
      changed_when: false
      tags:
        - bsd_bectl
        - bsd_be_create
        - debug

    - name: List zpool checkpoints
      ansible.builtin.command:
        zpool list -H -o name,checkpoint
      changed_when: false
      register: zpool_checkpoints_pre_upgrade_result
      tags:
        - bsd_zpool
        - bsd_zpool_list

    - name: Show zpool checkpoints
      ansible.builtin.debug:
        msg: "{{ item | ansible.builtin.split('\t') }}"
      loop: "{{ zpool_checkpoints_pre_upgrade_result.stdout_lines }}"
      tags:
        - bsd_zpool
        - bsd_zpool_list
        - debug

    - name: Perform the upgrade
      ansible.builtin.command:
        echo TODO
      become: true
      become_method: ansible.builtin.sudo
      register: opnsense_upgrade_result
      tags:
        - opnsense_upgrade
        - upgrade

## Reboot if upgrade does not do this on it's own
## OR: Wait here for SSH reconnect

    - name: Prompt to delete NEW checkpoint
      ansible.builtin.pause:
        prompt: >-
          OPNSense has been upgraded! Check whether everything is working properly.
          Please confirm you want to discard the old checkpoint and activate the new boot environment.
          Remember: A ZFS pool can only have a single checkpoint.
          This playbook wants to discard the checkpoint once the new OPNSense release is verified working.
          Press return to continue. Press Ctrl+c and then "a" to abort
      when: "{{ opnsense_upgrade_result.rc == 0 }}"
      tags:
        - pause
        - prompt
        - destructive

    - name: Delete NEW zpool checkpoint
      ansible.builtin.command:
        zpool checkpoint --discard --wait zroot
      become: true
      become_method: ansible.builtin.sudo
      register: zpool_checkpoint_discard_result
      when: "{{ opnsense_upgrade_result.rc == 0 }}"
      tags:
        - bsd_zpool
        - bsd_zpool_checkpoint_discard
        - destructive

#    - name: Install Extra packages
#      opkg: >
#        name={{ item }}
#        state=installed
#      with_items:
#        - ethtool
#      tags:
#        - opkg_packages
#        - packages
#        - install_packages
